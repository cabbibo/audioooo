#pragma kernel Sphere




struct Volume{
  float dist;
  float3 nor;
};

RWStructuredBuffer<Volume> _VolumeBuffer;
int _VolumeBuffer_COUNT;

float4x4 _Transform;
float4x4 _InverseTransform;

#include "../Chunks/safeID.cginc"
#include "../Chunks/sdfFunctions.cginc"

float3 _Dimensions;
float3 _Extents;
float3 _Center;



float3 GetPos( int id){
    uint xID = id % int(_Dimensions.x);
    uint yID = (id / (int(_Dimensions.x))) % int(_Dimensions.y);
    uint zID = id / (int(_Dimensions.x) * int(_Dimensions.y));

    float x = float(xID) / float(_Dimensions.x);
    float y = float(yID) / float(_Dimensions.y);
    float z = float(zID) / float(_Dimensions.z);

    float3 p = (float3(x,y,z)-float3(.5 , .5 , .5)) * _Extents *2 + _Center;//_Extents;


   return p;
}










void pR(inout float2 p, float a) {
  p = cos(a)*p + sin(a)*float2(p.y, -p.x);
}


float length6( float3 p )
{
  p = p*p*p; p = p*p;
  return pow( p.x + p.y + p.z, 1.0/6.0 );
}

float fractal(float3 p , float size)
{
    float len = length(p);
    p=p.yxz;

    float scale = 1.25;
    const int iterations = 50;
  float l = 0.;
    
    float2 rotationAnimAmp = 3. * float2(0.02,0.04);
  float2 rotationPhase = float2(.8,0.83);
    float3 juliaOffset = float3(-3.,-1.5,-.5);
    
    for (int i=0; i<iterations; i++) {
    p.xy = abs(p.xy);
        // scale and offset the position
    p = p*scale + juliaOffset;
        
        // Rotate the position

        pR(p.xy,rotationPhase.x*3.14);
        pR(p.zx,rotationPhase.y*3.14);   

        l=length6(p);
  }
    
  return l*pow(scale, -float(iterations))-size;
}


float map( float3 pos ){

  float res = 10000;
  //res =sdCapsule(pos , float3(0,1,0), float3(0,0,1) , .2);
  res = fractal(pos,1);//sdCapsule(pos , float3(0,1,0), float3(0,0,1) , .2);
  //res = hardU( res, sdCapsule(pos , float3(1,0,0), float3(0,0,1) , .2));
  //res = hardU( res, sdCapsule(pos , float3(-1,1,0), float3(0,-1,1) , .2));
  //res = hardU( res, sdCapsule(pos , float3(1,-1,0), float3(-1,0,1) , .2));
return res;
}

float3 GetNor( float3 pos ){
  float3 eps = float3(0.0001,0,0);
  float3 nor = float3( map( pos-eps.xyy) - map( pos+eps.xyy)
                     , map( pos-eps.yxy) - map( pos+eps.yxy)
                     , map( pos-eps.yyx) - map( pos+eps.yyx));

  return normalize(nor);

}


#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void Sphere(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

  int pID = threadID + u3GroupID.x * NR_THREADS;

  pID = safeID(pID,_VolumeBuffer_COUNT);
  Volume v = _VolumeBuffer[pID];

  float3 pos = GetPos( pID );
  float d = map( pos );

  v.dist = d;// pos.x * 20;//float(pID % int(_Dimensions.x))/ float(_Dimensions.x);
  v.nor = GetNor(pos);//float3(0,1,0);
  _VolumeBuffer[pID] = v;

}